#!/usr/bin/env bash
# SPDX-License-Identifier: MIT
#
# Custom script for installing the kubernetes cluster

main() {
  # Determine if the current environment is WSL
  if grep -qi microsoft /proc/version; then
    IS_WSL=1
  fi

  test_is_admin
  get_local_fqdn

  # Download latest ISO
  download_iso
  download_butane
  modify_iso
  upload_iso

  deploy_Sagittarius
  # deploy_Messier;
  # deploy_Bouvard;
  # deploy_LeVerrier;
}

test_is_admin() {
  # Test if we are running as administrator (needed for port_forwarding)
  if [[ "${IS_WSL}" -eq 1 ]]; then
    if ! net.exe session &> /dev/null; then
      logFatal "You must run this console with elevated administrative privileges"
    fi
  fi
}

# $1: Hostname for that key
load_ssh_key() {
  SSH_PUB=""
  SSH_PRIV=""

  if [[ -z "$1" ]]; then
    logFatal "No hostname provided"
  fi

  local res=0
  local private_key="${ROOT}/${SSH_PATH}/id_${1}"
  local public_key="${ROOT}/${SSH_PATH}/id_${1}.pub"

  if [[ ! -f "${private_key}" ]] || [[ ! -f "${public_key}" ]]; then
    logInfo "SSH keys for $1 don't exist. Create them..."

    ssh-keygen -t ecdsa -b 521 -N '' -f "${private_key}"
    res=$?
    if [[ "${res}" -eq 0 ]]; then
      logTrace "Successfully created SSH keypair for ${1}"

      # Encrypt private key
      sops -e --in-place --age "${SOPS_AGE_PUB}" "${private_key}"
      res=$?
      if [[ "${res}" -eq 0 ]]; then
        logInfo "Private key for ${1} encrypted successfully"
        SSH_PRIV="${private_key}"
        SSH_PUB="${public_key}"

        # Best effort
        git add "${SSH_PUB}" "${SSH_PRIV}"
        res=$?
        if [[ "${res}" -eq 0 ]]; then
          logTrace "Successfully added to Git"
        else
          logWarn "Could not add the new keys to git: ${res}"
        fi

      else
        rm -f "${private_key}" "${public_key}"
        echo -e "#######################################################"
        echo -e "####### WARNING WARNING WARNING WARNING WARNING #######"
        echo -e "#######################################################"
        echo -e ""
        echo -e "Unprotected SSH keys might have been left in the repo. See:"
        echo -e "${private_key}"
        echo -e "${public_key}"
        logFatal "Errror while encrypthing SSH keys for ${1} (${res})"
      fi

    else
      rm -f "${private_key}" "${public_key}"
      echo -e "#######################################################"
      echo -e "####### WARNING WARNING WARNING WARNING WARNING #######"
      echo -e "#######################################################"
      echo -e ""
      echo -e "Unprotected SSH keys might have been left in the repo. See:"
      echo -e "${private_key}"
      echo -e "${public_key}"
      logFatal "Errror while generating SSH keys for ${1} (${res})"
    fi
  else
    logInfo "SSH keys found"
    SSH_PRIV="${private_key}"
    SSH_PUB="${public_key}"
  fi

  # Obtain the public key
  SSH_KEY=$(sed -e 's/^\([^ ]* *[^ ]*\).*$/\1/' < "${public_key}")
  res=$?
  if [[ ${res} -ne 0 ]]; then
    logFatal "Failed to obtain public SSH key (${res})"
  else
    logTrace "Will be using key: ${SSH_KEY}"
  fi
}

deploy_Sagittarius() {
  local host=Sagittarius

  local IGNITION_IN="${ROOT}/${IG_IN}"

  local host_bindir="${ROOT}/build/${host}"
  export LOCAL_CONFIG=".config/demers.env:.config/local.env"

  mkdir -p "${host_bindir}"
  pushd "${host_bindir}" > /dev/null || logFatal "No bindir"

  load_ssh_key "${host}"

    # Generate Butane for this node
  cp "${IGNITION_IN}" custom.bu
  # shellcheck disable=2154
  sed -i -e "s,<hostname>,${host}," \
    -e "s,<ssh_key>,${SSH_KEY}," custom.bu

  # Convert to ignition file
  if ! ${BUTANE} -o "custom.ig" "custom.bu"; then
    logFatal "Failed to convert into ignition: custom.ig"
  else
    logInfo "Ignition generated: custom.ig"
  fi

  start_server

  if ! ${DEPLOY_EXEC} vm "${host}" -c=1 -d=10GiB -r=4GiB --iso="${ISO_CUSTOM}"; then
    logFatal "Failed to deploy VM"
  else
    logInfo "VM deployed successfully"
  fi

  # Try SSH. Abort in 20 minutes (OS install might take a while)
  logInfo "Checking if the new VM is online"
  local cmd=0
  local timeout_min=20
  local abort_by=$(($(date +%s) + $((timeout_min * 60))))
  local expected_hostname=0
  expected_hostname=${FQDN//"${HOSTNAME}"/"${host}"}
  cmd="ssh -F /dev/null -o \"IdentitiesOnly=yes\" -i <(sops -d \"${SSH_PRIV}\") core@${expected_hostname} 'exit'"
  eval "${cmd}"
  local err=$?
  while [[ ${err} -gt 0 ]]; do
    # shellcheck disable=2312
    if [[ $(date +%s) -ge ${abort_by} ]]; then
      logError "Waited for ${timeout_min} minutes. Still getting an error (${err})"
      break
    fi
    sleep 5 # Don't DDOS the new VM
    logTrace "Waiting for ${host} to be online via SSH (${err})"
    eval "${cmd}"
    err=$?
  done

  logTrace "Done waiting for VM to come online"
  stop_server

  if [[ "${err}" -ne 0 ]]; then
    logFatal "VM ${host} never came online"
  else
    if ! ${DEPLOY_EXEC} eject-iso "${host}"; then
      logFatal "Failed to eject ISO"
    else
      logInfo "Ejected ISO successfully"
    fi
  fi

  popd > /dev/null || logFatal "Failed to pop @ ${LINENO}"
}

deploy_Messier() {
  local host=Messier
  local host_bindir="${ROOT}/build/${host}"
  export LOCAL_CONFIG=".config/sonia.env:.config/local.env"

  export LOCAL_CONFIG=".config/sonia.env:.config/local.env"
  if ! ${DEPLOY_EXEC} vm "${host}" -c=1 -d=10GiB -r=4GiB --iso="${ISO_CUSTOM}"; then
    logFatal "Failed to deploy VM"
  else
    logInfo "VM deployed successfully"
  fi
}

deploy_Bouvard() {
  local host=Sagittarius
  local host_bindir="${ROOT}/build/${host}"
  export LOCAL_CONFIG=".config/demers.env:.config/local.env"

  if ! ${DEPLOY_EXEC} vm "${host}" -c=8 -d=128GiB -r=32GiB --iso="${ISO_CUSTOM}"; then
    logFatal "Failed to deploy VM"
  else
    logInfo "VM deployed successfully"
  fi
}

deploy_LeVerrier() {
  local host=Sagittarius
  local host_bindir="${ROOT}/build/${host}"
  export LOCAL_CONFIG=".config/sonia.env:.config/local.env"

  if ! ${DEPLOY_EXEC} vm "${host}" -c=8 -d=128GiB -r=32GiB --iso="${ISO_CUSTOM}"; then
    logFatal "Failed to deploy VM"
  else
    logInfo "VM deployed successfully"
  fi
}

start_server() {
  # shellcheck disable=2154
  logInfo "Start HTTPS server on port ${SERVER_PORT}"

  # Start webserver for Fedora CoreOS ignition
  SERVER_PID=""
  if ! (python "${SERVER_EXEC}" &> /dev/null &) then
    logFatal "Cannot launch HTTPS server"
  else
    SERVER_PID=$(pgrep 'python')
    if [[ -z "${SERVER_PID}" ]]; then
      logFatal "Failed to start HTTPS server"
    else
      logTrace "Started HTTPS server: ${SERVER_PID}"
    fi
  fi

  # Start WSL port forwarding
  if [[ "${IS_WSL}" -eq 1 ]]; then
    FORWARD_PID=""
    if ! (port_forwarding &> /dev/null &) then
      pkill -9 -f python
      logFatal "Could not launch WSL port_forwarding"
    else
      FORWARD_PID=$(pgrep 'port_forwarding')
      if [[ -z "${FORWARD_PID}" ]]; then
        pkill -9 -f python
        logFatal "Failed to start port forwarder"
      else
        logTrace "Started forwarder: ${FORWARD_PID}"
      fi
    fi
  fi
}

stop_server() {
  logInfo "Killing HTTP server..."

  # shellcheck disable=2086
  kill -s SIGTERM ${SERVER_PID}

  if [[ "${IS_WSL}" -eq 1 ]]; then
    # shellcheck disable=2086
    kill -s SIGTERM ${FORWARD_PID}
  fi

  logInfo "Killed!"
}

get_local_fqdn() {
  if [[ "${IS_WSL}" -eq 1 ]]; then

    # Find hostname
    HOSTNAME=$(wsl.exe hostname -s)
    if [[ -z "${HOSTNAME}" ]]; then
      logFatal "Could not determine hostname"
    else
      HOSTNAME=$(echo "${HOSTNAME}" | xargs)
      HOSTNAME=${HOSTNAME%$'\r'}
      logTrace "Hostname: ${HOSTNAME}"
    fi

    # Find Host's IP address
    local ip_regex=".*Pinging ${HOSTNAME}\\..*\\[(.*)\\].*"
    local ping_res=0
    ping_res=$(ping.exe -n 1 -4 "${HOSTNAME}")
    if [[ "${ping_res}" =~ ${ip_regex} ]]; then
      local ip=0
      ip=$(echo "${BASH_REMATCH[1]}" | xargs)
      ip=${ip%$'\r'}
      logTrace "IP: ${ip}"
    else
      logFatal "Did not find IP in: ${ping_res}\nUsing regex: ${ip_regex}"
    fi

    # Find Host's default gateway (assuming it is the DNS server)
    local gw_res=0
    gw_res=$(WMIC.exe NICConfig where IPEnabled="True" get DefaultIPGateway /value)
    local gw_regex='.*DefaultIPGateway=\{\"(.*)\",.*'
    if [[ "${gw_res}" =~ ${gw_regex} ]]; then
      local gw=0
      gw=$(echo "${BASH_REMATCH[1]}" | xargs)
      gw=${gw%$'\r'}
      logTrace "Gateway: ${gw}"
    else
      logFatal "Did not find Gateway in: ${gw_res}"
    fi

    # Find FQDN as seen by the Gateway
    local fqdn_res=0
    fqdn_res=$(nslookup.exe "${ip}" "${gw}")
    local fqdn_regex='.*Name:\s*(.*)\s+Address.*'
    if [[ "${fqdn_res}" =~ ${fqdn_regex} ]]; then
      FQDN=$(echo "${BASH_REMATCH[1]}" | xargs)
      FQDN=${FQDN%$'\r'}
      logTrace "FQDN: ${FQDN}"
    else
      logFatal "Did not find FQDN in: ${fqdn_res}"
    fi
  else
    logFatal "Unsupported get_local_fqdn"
  fi
}

download_iso() {
  logInfo "Download ISO using coreos-installer"

  local cmd="${COREOS_EXEC} download -f iso -C ${COREOS_BINDIR}"
  mkdir -p "${COREOS_BINDIR}"

  local res=0
  if ! res=$(eval "${cmd}"); then
    logFatal "Failed to download ISO"
  else
    # Extract name of iso from output
    # shellcheck disable=2312
    ISO_PATH=$(echo "${res}" | grep ".iso" | xargs)
    ISO_NAME=$(basename "${ISO_PATH}")
    logInfo "ISO downloaded: ${ISO_NAME}"
  fi
}

upload_iso() {
  local iso_to_upload=0
  iso_to_upload=$(dirname "${ISO_PATH}")/${ISO_CUSTOM}

  # shellcheck disable=2154
  logTrace "Uploading ISO to ${XEN_HOST}"
  export LOCAL_CONFIG=".config/sonia.env:.config/local.env"
  if ! ${DEPLOY_EXEC} upload-iso "${iso_to_upload}"; then
    logFatal "Failed to upload ISO to ${XEN_HOST}"
  fi

  logTrace "Uploading ISO to ${XEN_HOST}"
  export LOCAL_CONFIG=".config/demers.env:.config/local.env"
  if ! ${DEPLOY_EXEC} upload-iso "${iso_to_upload}"; then
    logFatal "Failed to upload ISO to ${XEN_HOST}"
  fi
}

download_butane() {
  pushd "${COREOS_BINDIR}" > /dev/null || logFatal "No CoreOS bindir"

  local base=0
  # shellcheck disable=2154
  base=$(basename "${BUTANE_URL}")
  BUTANE="$(pwd)/${base}"

  echo "Make sure we have butane locally: ${base}"
  if [[ -f "${base}" ]]; then
    logInfo "Butane is already downloaded"
    popd > /dev/null || logFatal "Failed to pop @ ${LINENO}"
    return 0
  fi

  if ! curl -LO "${BUTANE_URL}" --output "${base}"; then
    logFatal "Failed to download butane from: ${BUTANE_URL}"
  else
    chmod +x "${base}"
    logInfo "Butane downloaded to: ${BUTANE}"
  fi

  popd > /dev/null || logFatal "Failed to pop @ ${LINENO}"
}

modify_iso() {
  # Filenames
  local ignition_file="remote-ignition.ig"
  local butane_file=0
  butane_file=${ignition_file//\.ig/.bu}
  ISO_CUSTOM=${ISO_NAME//\.iso/_${HOSTNAME}.iso}

  # Don't generate custom ISO if it already exists
  if [[ -f "${COREOS_BINDIR}/${ISO_CUSTOM}" ]]; then
    logInfo "Custom ISO already exists"
    return 0
  fi

  pushd "${COREOS_BINDIR}" > /dev/null || logFatal "No CoreOS bindir"

  # shellcheck disable=2154
  # Generate the Butane file we want to embedded in the ISO
  cat > "${butane_file}" <<- EOF
variant: fcos
version: 1.5.0
ignition:
  config:
    replace:
      source: "https://${FQDN}:${SERVER_PORT}/custom.ig"
  security:
    tls:
      certificate_authorities:
      - local: "$(basename "${ROOT}/${IG_CA}")"
EOF

  # Convert to ignition file
  if ! ${BUTANE} -o "${ignition_file}" -d "$(dirname "${ROOT}/${IG_CA}")" "${butane_file}"; then
    logFatal "Failed to convert into ignition: ${butane_file}"
  else
    logInfo "Ignition generated: ${ignition_file}"
  fi

  # Modify ISO
  local cmd="${COREOS_EXEC} iso customize --dest-device /dev/xvda --dest-ignition ${ignition_file} -o ${ISO_CUSTOM} ${ISO_NAME}"
  if ! eval "${cmd}"; then
    logFatal "Failed to generate custom ISO: ${ISO_CUSTOM}"
  else
    logInfo "Custom ISO generated: ${ISO_CUSTOM}"
  fi

  popd > /dev/null || logFatal "Failed to pop @ ${LINENO}"
}

###########################
###### Startup logic ######
###########################

## Path configurations ##
ROOT="$(git rev-parse --show-toplevel)"
ME="$(basename "$0")"

COREOS_BINDIR=${ROOT}/build/coreos-iso
COREOS_EXEC=$(realpath ~/.cargo/bin/coreos-installer)

SERVER_EXEC="${ROOT}/src/bootstrap/01-vm/ignition_server.py"
DEPLOY_EXEC="${ROOT}/src/bootstrap/01-vm/deploy_vm"
LOGGER_EXEC="${ROOT}/tools/logger-shell/logger.sh"
SHUTILS_EXEC="${ROOT}/tools/shell-utils/shell-utils.sh"

# Import logger
if [[ -z "${LOGFILE}" ]]; then
  # shellcheck disable=1090
  . "${LOGGER_EXEC}"
fi

# Load configuration
source "${ROOT}/.config/default.env"
# shellcheck disable=2154
IFS=":" read -r -a CONFIGS <<< "${LOCAL_CONFIG}"
for config in "${CONFIGS[@]}"; do
  log "Loading config: ${config}"
  # shellcheck source=.config/default.env
  source <(sops -d "${ROOT}/${config}" || true)
done

# shellcheck disable=1090
# Import shell utilities
. "${SHUTILS_EXEC}"

log "== ${ME} Started =="
main

log "== ${ME} Exited gracefully =="
